global {
    # Output directory:
    ducttape_output="/usr2/home/chuchenl/crf-auto-cs/ne-taskpaper-compute-b"

    # general
    cores=30

    # data files
    labeled_train_text="/usr0/home/chuchenl/git/cs-shared-task/splits/ne-en/training_ne.sd"
    labeled_test_text="/usr0/home/chuchenl/git/cs-shared-task/splits/ne-en/test_ne.sd"
    unlabeled_train_text=(Other: yes="/usr0/home/chuchenl/git/cs-shared-task/resources/users/nepali_training/nepali_training_test.sd" no="/usr0/home/chuchenl/git/cs-shared-task/splits/ar/unlabeled") 
    labeled_train_labels="/usr0/home/chuchenl/git/cs-shared-task/splits/ne-en/training_ne.labels"
    labeled_test_labels="/usr0/home/chuchenl/git/cs-shared-task/splits/ne-en/test_ne.labels"

    tsv_template="/usr0/home/chuchenl/git/cs-shared-task/splits/ne-en/test_ne.labels.tsv"
    
    unlabeled_test_text="/usr0/home/chuchenl/git/cs-shared-task/tests/ne-surprise2/ne.sd_0"
    unlabeled_test_labels="/usr0/home/chuchenl/git/cs-shared-task/tests/ne-surprise2/ne.labels_0"
    unlabeled_test_tsv="/usr0/home/chuchenl/git/cs-shared-task/tests/ne-surprise2/ne.labels.tsv_0"

    embeddings_file=(UseEmbeddings: yes="/usr0/home/chuchenl/git/tweet-embedding/w2v_model" no="")
    word_list=(UseWL: yes="/usr0/home/wammar/git/cs-shared-task/resources/wordlists/entities.u.word /usr0/home/wammar/git/cs-shared-task/resources/wordlists/vocab.en.no_punc /usr0/home/wammar/git/cs-shared-task/resources/wordlists/vocab.ne.english_diff_romanized /usr0/home/wammar/git/cs-shared-task/resources/wordlists/vocab.ne.romanized_diff_english  /usr0/home/wammar/git/cs-shared-task/resources/wordlists/entities.ne.word /usr0/home/chuchenl/git/cs-shared-task/resources/nepali/wikipedia_ne_titles /usr0/home/chuchenl/git/cs-shared-task/resources/nepali/wikipedia_hi_titles" no="")
    fuzzy_word_list=(Fuzzy: yes="/usr0/home/chuchenl/git/cs-shared-task/resources/nepali/wikipedia_ne_titles /usr0/home/chuchenl/git/cs-shared-task/resources/nepali/wikipedia_hi_titles" no="")
    # fuzzy_word_list=""

    dict_list=""

    brown_clusters_dir="/usr0/home/wammar/git/brown-cluster/"
    wammar_utils_dir="/usr0/home/chuchenl/git/alignment-with-openfst/wammar-utils"
    alignment_with_openfst_dir="/usr0/home/chuchenl/git/alignment-with-openfst"

    #tag_dict_file="/usr1/home/wammar/pos-data/li12-tag-dicts/autoencoder-format/en-wik-20120320.dic"
    supervised=(Semi: yes="" no="1")

    labels_count=6
    lbfgs_itercount=100

    arabic_morph=""
    phrase_list="/usr0/home/wammar/git/cs-shared-task/resources/wordlists/entities.u.phrase"

}

plan Full {
    reach Evaluate via (Model: autoencoder ) * (L2Strength: point_three) * (DirichletAlpha: o_one) * (ReconstructBrownClusters: no) * (UseWL: yes no) * (Fold: 0) * (UseEmbeddings: yes no) * (XIM1: no) * (XIM2: no) * (XIP1: no) * (XIP2: no) * (Fuzzy: no) * (Semi: yes) * (Other: no)
}

plan Fuzzy {
    reach Evaluate via (Model: autoencoder ) * (L2Strength: point_three) * (DirichletAlpha: o_one) * (ReconstructBrownClusters: no) * (UseWL: yes no) * (Fold: 0) * (UseEmbeddings: yes) * (XIM1: no) * (XIM2: no) * (XIP1: no) * (XIP2: no) * (Fuzzy: yes no) * (Semi: yes) * (Other: no)
}

plan Semi {
    reach Evaluate via (Model: autoencoder ) * (L2Strength: point_three) * (DirichletAlpha: o_one) * (ReconstructBrownClusters: no) * (UseWL: yes) * (Fold: 0) * (UseEmbeddings: yes) * (XIM1: no) * (XIM2: no) * (XIP1: no) * (XIP2: no) * (Fuzzy: yes) * (Semi: yes no) * (Other: no)
}

plan Other {
    reach Evaluate via (Model: autoencoder ) * (L2Strength: point_three) * (DirichletAlpha: o_one) * (ReconstructBrownClusters: no) * (UseWL: yes) * (Fold: 0) * (UseEmbeddings: yes no) * (XIM1: no) * (XIM2: no) * (XIP1: no) * (XIP2: no) * (Fuzzy: yes no) * (Semi: yes) * (Other: yes no)
}

plan Baseline {
    reach Evaluate via (Model: autoencoder ) * (L2Strength: point_three) * (DirichletAlpha: o_one) * (ReconstructBrownClusters: no) * (UseWL: no) * (Fold: 0) * (UseEmbeddings: no) * (XIM1: no) * (XIM2: no) * (XIP1: no) * (XIP2: no) * (Fuzzy: no) * (Semi: no) * (Other: no)
}

plan submission {
    reach GenerateForSubmission via (Model: autoencoder) * (L2Strength: point_three) * (ReconstructBrownClusters: no) * (Fold: test) 
}

plan crfsuite {
    reach Evaluate via (Model: crfsuite ) * (UseEmbeddings: yes) * (UseWL: yes) * (Fold: 0) * (crfStrength: point_three three ten point_one point_o_three one)
}
